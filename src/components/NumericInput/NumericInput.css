/*
A mixin to generate the classes for one phase of a React CSSTransition.
`$phase` must be `appear` or `enter` or `exit`.
If `enter` phase is given then `appear` phase will be generated at the same time.
If `exit` phase is given then property values are animated in reverse, from final to initial.
**Example:**
@include react-transition-phase(toast, enter, $enter-translate, $before: "&");
@include react-transition-phase(toast, leave, $leave-blur, $pt-transition-duration * 3, $before: "&");
*/
/*
Given map of properties to values, set each property to the value at the given index.
(remember that sass indices are 1-based).
Example: `each-prop((opacity: 0 1), 2)` will print "opacity: 1"
*/
/*
Format transition class name with all the bits.
"enter" phase will include "appear" phase in returned name.
*/
.optum-numeric-input .optum-button-group.optum-vertical > .optum-button {
  -webkit-box-flex: 1;
      -ms-flex: 1 1 14px;
          flex: 1 1 14px;
  min-height: 0;
  padding: 0;
  width: 30px;
}

.optum-numeric-input .optum-button-group.optum-vertical > .optum-button:first-child {
  border-radius: 0 3px 0 0;
}

.optum-numeric-input .optum-button-group.optum-vertical > .optum-button:last-child {
  border-radius: 0 0 3px 0;
}

.optum-numeric-input .optum-button-group.optum-vertical:first-child > .optum-button:first-child {
  border-radius: 3px 0 0 0;
}

.optum-numeric-input .optum-button-group.optum-vertical:first-child > .optum-button:last-child {
  border-radius: 0 0 0 3px;
}

.optum-numeric-input.optum-large .optum-button-group.optum-vertical > .optum-button {
  width: 40px;
}

.NumericInput {
  font-size: 15px;
  padding: 10px;
  border-radius: 2px;
}

.numericInputButton {
  font-size: 15px;
  color: red;
}
/*# sourceMappingURL=NumericInput.css.map */