/*
A mixin to generate the classes for one phase of a React CSSTransition.
`$phase` must be `appear` or `enter` or `exit`.
If `enter` phase is given then `appear` phase will be generated at the same time.
If `exit` phase is given then property values are animated in reverse, from final to initial.
**Example:**
@include react-transition-phase(toast, enter, $enter-translate, $before: "&");
@include react-transition-phase(toast, leave, $leave-blur, $pt-transition-duration * 3, $before: "&");
*/
/*
Given map of properties to values, set each property to the value at the given index.
(remember that sass indices are 1-based).
Example: `each-prop((opacity: 0 1), 2)` will print "opacity: 1"
*/
/*
Format transition class name with all the bits.
"enter" phase will include "appear" phase in returned name.
*/
/*
A mixin to generate the classes for a React CSSTransition which animates any number of CSS
properties at once.

Transitioned properties are specificed as a map of property names to lists of (inital value, final
value). For enter & appear transitions, each property will transition from its initial to its final
value. For exit transitions, each property will transition in reverse, from final to initial.

**Simple example:**
`@include react-transition("popover", (opacity: 0 1), $before: "&");`
Transition named "popover" moves opacity from 0 to 1. `"&"` indicates that the
Transition classes are expected to be applied to this element, where the mixin is invoked.

**Params:**
$name: React transitionName prop
$properties: map of CSS property to (initial, final) values
$duration: transition duration
$easing: transition easing function
$delay: transition delay
$before: selector text to insert before transition name (often to select self: &)
$after: selector text to insert after transiton name (to select children)
*/
/*
A mixin to generate the classes for one phase of a React CSSTransition.
`$phase` must be `appear` or `enter` or `exit`.
If `enter` phase is given then `appear` phase will be generated at the same time.
If `exit` phase is given then property values are animated in reverse, from final to initial.

**Example:**
@include react-transition-phase(toast, enter, $enter-translate, $before: "&");
@include react-transition-phase(toast, leave, $leave-blur, $pt-transition-duration * 3, $before: "&");
*/
/*
Given map of properties to values, set each property to the value at the given index.
(remember that sass indices are 1-based).

Example: `each-prop((opacity: 0 1), 2)` will print "opacity: 1"
*/
/*
Format transition class name with all the bits.
"enter" phase will include "appear" phase in returned name.
*/
.optum-panel-stack {
  overflow: hidden;
  position: relative;
}

.optum-panel-stack-header {
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-shadow: 0 1px rgba(16, 22, 26, 0.15);
          box-shadow: 0 1px rgba(16, 22, 26, 0.15);
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-negative: 0;
      flex-shrink: 0;
  height: 30px;
  z-index: 1;
}

.optum-dark .optum-panel-stack-header {
  -webkit-box-shadow: 0 1px rgba(255, 255, 255, 0.15);
          box-shadow: 0 1px rgba(255, 255, 255, 0.15);
}

.optum-panel-stack-header > span {
  -webkit-box-align: stretch;
      -ms-flex-align: stretch;
          align-items: stretch;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
}

.optum-panel-stack-header .optum-heading {
  margin: 0 5px;
}

.optum-button.optum-panel-stack-header-back {
  margin-left: 5px;
  padding-left: 0;
  white-space: nowrap;
}

.optum-button.optum-panel-stack-header-back .optum-icon {
  margin: 0 2px;
}

.optum-panel-stack-view {
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  background-color: #ffffff;
  border-right: 1px solid rgba(16, 22, 26, 0.15);
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  margin-right: -1px;
  overflow-y: auto;
  z-index: 1;
}

.optum-dark .optum-panel-stack-view {
  background-color: #30404d;
}

.optum-panel-stack-view:nth-last-child(n + 4) {
  display: none;
}

.optum-panel-stack-push .optum-panel-stack-enter, .optum-panel-stack-push .optum-panel-stack-appear {
  -webkit-transform: translateX(100%);
          transform: translateX(100%);
  opacity: 0;
}

.optum-panel-stack-push .optum-panel-stack-enter-active, .optum-panel-stack-push .optum-panel-stack-appear-active {
  -webkit-transform: translate(0%);
          transform: translate(0%);
  opacity: 1;
  -webkit-transition-delay: 0;
          transition-delay: 0;
  -webkit-transition-duration: 400ms;
          transition-duration: 400ms;
  -webkit-transition-property: opacity, -webkit-transform;
  transition-property: opacity, -webkit-transform;
  transition-property: transform, opacity;
  transition-property: transform, opacity, -webkit-transform;
  -webkit-transition-timing-function: ease;
          transition-timing-function: ease;
}

.optum-panel-stack-push .optum-panel-stack-exit {
  -webkit-transform: translate(0%);
          transform: translate(0%);
  opacity: 1;
}

.optum-panel-stack-push .optum-panel-stack-exit-active {
  -webkit-transform: translateX(-50%);
          transform: translateX(-50%);
  opacity: 0;
  -webkit-transition-delay: 0;
          transition-delay: 0;
  -webkit-transition-duration: 400ms;
          transition-duration: 400ms;
  -webkit-transition-property: opacity, -webkit-transform;
  transition-property: opacity, -webkit-transform;
  transition-property: transform, opacity;
  transition-property: transform, opacity, -webkit-transform;
  -webkit-transition-timing-function: ease;
          transition-timing-function: ease;
}

.optum-panel-stack-pop .optum-panel-stack-enter, .optum-panel-stack-pop .optum-panel-stack-appear {
  -webkit-transform: translateX(-50%);
          transform: translateX(-50%);
  opacity: 0;
}

.optum-panel-stack-pop .optum-panel-stack-enter-active, .optum-panel-stack-pop .optum-panel-stack-appear-active {
  -webkit-transform: translate(0%);
          transform: translate(0%);
  opacity: 1;
  -webkit-transition-delay: 0;
          transition-delay: 0;
  -webkit-transition-duration: 400ms;
          transition-duration: 400ms;
  -webkit-transition-property: opacity, -webkit-transform;
  transition-property: opacity, -webkit-transform;
  transition-property: transform, opacity;
  transition-property: transform, opacity, -webkit-transform;
  -webkit-transition-timing-function: ease;
          transition-timing-function: ease;
}

.optum-panel-stack-pop .optum-panel-stack-exit {
  -webkit-transform: translate(0%);
          transform: translate(0%);
  opacity: 1;
}

.optum-panel-stack-pop .optum-panel-stack-exit-active {
  -webkit-transform: translateX(100%);
          transform: translateX(100%);
  opacity: 0;
  -webkit-transition-delay: 0;
          transition-delay: 0;
  -webkit-transition-duration: 400ms;
          transition-duration: 400ms;
  -webkit-transition-property: opacity, -webkit-transform;
  transition-property: opacity, -webkit-transform;
  transition-property: transform, opacity;
  transition-property: transform, opacity, -webkit-transform;
  -webkit-transition-timing-function: ease;
          transition-timing-function: ease;
}
/*# sourceMappingURL=PanelView.css.map */