// Generated with util/create-component.js


@import "../../typography.scss";
@import "../../variables.scss";
@import "../../styles/mixins";

$button-border-width: 1px !default;

$button-box-shadow:
  inset 0 0 0 $button-border-width rgba($black, 0.2),
  inset 0 (-$button-border-width) 0 rgba($black, 0.1) !default;
$button-box-shadow-active:
  inset 0 0 0 $button-border-width rgba($black, 0.2),
  inset 0 1px 2px rgba($black, 0.2) !default;
$button-intent-box-shadow:
  inset 0 0 0 $button-border-width rgba($black, 0.4),
  inset 0 (-$button-border-width) 0 rgba($black, 0.2) !default;
$button-intent-box-shadow-active:
  inset 0 0 0 $button-border-width rgba($black, 0.4),
  inset 0 1px 2px rgba($black, 0.2) !default;

$dark-button-box-shadow:
  0 0 0 $button-border-width rgba($black, 0.4) !default;
$dark-button-box-shadow-active:
  0 0 0 $button-border-width rgba($black, 0.6),
  inset 0 1px 2px rgba($black, 0.2) !default;
$dark-button-intent-box-shadow:
  0 0 0 $button-border-width rgba($black, 0.4) !default;
$dark-button-intent-box-shadow-active:
  0 0 0 $button-border-width rgba($black, 0.4),
  inset 0 1px 2px rgba($black, 0.2) !default;


$button-intents: (
  "primary": ($pt-intent-primary, $blue2, $blue1),
  "success": ($pt-intent-success, $green2, $green1),
  "warning": ($pt-intent-warning, $orange2, $orange1),
  "danger": ($pt-intent-danger, $red2, $red1)
) !default;

$button-gradient: linear-gradient(to bottom, rgba($white, 0.8), rgba($white, 0)) !default;
$button-intent-gradient: linear-gradient(to bottom, rgba($white, 0.1), rgba($white, 0)) !default;
$dark-button-gradient: linear-gradient(to bottom, rgba($white, 0.05), rgba($white, 0)) !default;

$button-background-color: $light-gray5 !default;
$button-background-color-hover: $light-gray4 !default;
$button-background-color-active: $light-gray2 !default;
$button-background-color-disabled: rgba($light-gray1, 0.5) !default;
$button-background-color-active-disabled: rgba($light-gray1, 0.7) !default;

$dark-button-background-color: $dark-gray5 !default;
$dark-button-background-color-hover: $dark-gray4 !default;
$dark-button-background-color-active: $dark-gray2 !default;
$dark-button-background-color-disabled: rgba($dark-gray5, 0.5) !default;
$dark-button-background-color-active-disabled: rgba($dark-gray5, 0.7) !default;
$dark-button-intent-color-disabled: rgba($white, 0.3);

$control-checked-background-color: nth(map-get($button-intents, "primary"), 1) !default;
$control-checked-background-color-hover: nth(map-get($button-intents, "primary"), 2) !default;
$control-checked-background-color-active: nth(map-get($button-intents, "primary"), 3) !default;

$control-indicator-size: $pt-icon-size-standard !default;
$control-indicator-size-large: $pt-icon-size-large !default;
$control-indicator-spacing: $pt-grid-size !default;

$control-background-color: $button-background-color !default;
$control-background-color-hover: $button-background-color-hover !default;
$control-background-color-active: $button-background-color-active !default;
$dark-control-background-color: $dark-button-background-color !default;
$dark-control-background-color-hover: $dark-button-background-color-hover !default;
$dark-control-background-color-active: $dark-button-background-color-active !default;
// "intent": (default, hover, active colors)


@mixin control-checked-colors($selector: ":checked") {
  input#{$selector} ~ .#{$ns}-control-indicator {
    background-color: $control-checked-background-color;
    background-image: $button-intent-gradient;
    box-shadow: $button-intent-box-shadow;
    color: $white;
  }

  &:hover input#{$selector} ~ .#{$ns}-control-indicator {
    background-color: $control-checked-background-color-hover;
    box-shadow: $button-intent-box-shadow;
  }

  input:not(:disabled):active#{$selector} ~ .#{$ns}-control-indicator {
    background: $control-checked-background-color-active;
    box-shadow: $button-intent-box-shadow-active;
  }

  input:disabled#{$selector} ~ .#{$ns}-control-indicator {
    background: rgba($control-checked-background-color, 0.5);
    box-shadow: none;
  }

  .#{$ns}-dark & {
    input#{$selector} ~ .#{$ns}-control-indicator {
      box-shadow: $dark-button-intent-box-shadow;
    }

    &:hover input#{$selector} ~ .#{$ns}-control-indicator {
      background-color: $control-checked-background-color-hover;
      box-shadow: $dark-button-intent-box-shadow;
    }

    input:not(:disabled):active#{$selector} ~ .#{$ns}-control-indicator {
      background-color: $control-checked-background-color-active;
      box-shadow: $dark-button-intent-box-shadow-active;
    }

    input:disabled#{$selector} ~ .#{$ns}-control-indicator {
      background: rgba($control-checked-background-color-active, 0.5);
      box-shadow: none;
    }
  }
}

@mixin indicator-position($size) {
  $padding: $size + $control-indicator-spacing;

  &:not(.#{$ns}-align-right) {
    padding-left: $padding;

    .#{$ns}-control-indicator {
      margin-left: -$padding;
    }
  }

  &.#{$ns}-align-right {
    padding-right: $padding;

    .#{$ns}-control-indicator {
      margin-right: -$padding;
    }
  }
}




.#{$ns}-control {
  @include control-checked-colors();
  @include indicator-position($control-indicator-size);
  cursor: pointer;
  display: block;
  margin-bottom: $pt-grid-size;
  position: relative;
  text-transform: none;
  &.#{$ns}-radio {
    .#{$ns}-control-indicator {
      border-radius: 50%;
    }
    input:checked ~ .#{$ns}-control-indicator::before {
      background-image: radial-gradient($white, $white 28%, transparent 32%);
      border: none;
      overflow: hidden;
    }
  
    input:checked:disabled ~ .#{$ns}-control-indicator::before {
      opacity: 0;
    }
  
    input:focus ~ .#{$ns}-control-indicator {
      -moz-outline-radius: $control-indicator-size;
    }
  }

  &.#{$ns}-disabled {
    color: $pt-text-color-disabled;
    cursor: not-allowed;
  }

  &.#{$ns}-inline {
    display: inline-block;
    margin-right: $pt-grid-size * 2;
  }
  &.#{$ns}-large-radio {
    @include indicator-position($control-indicator-size-large);
    // larger text
    font-size: calc($pt-font-size-large + 2px);

    .#{$ns}-control-indicator {
      // em-based sizing
      font-size: $control-indicator-size-large;
    }
    & > span {
      font-size: calc(#{$pt-font-size-large} + 2px);
    }

    &.#{$ns}-align-right .#{$ns}-control-indicator {
      margin-top: 3px;
    }
  }

  input {
    left: 0;
    opacity: 0;
    position: absolute;
    top: 0;
    z-index: -1; // don't let it intercept clicks
  }

  

  &:hover .#{$ns}-control-indicator {
    background-color: $control-background-color-hover;
  }

  input:not(:disabled):active ~ .#{$ns}-control-indicator {
    background: $control-background-color-active;
    box-shadow: $button-box-shadow-active;
  }

  input:disabled ~ .#{$ns}-control-indicator {
    background: $button-background-color-disabled;
    box-shadow: none;
    cursor: not-allowed;
  }


  // right-aligned indicator is glued to the right side of the container
  &.#{$ns}-align-right .#{$ns}-control-indicator {
    float: right;
    margin-left: $control-indicator-spacing;
    margin-top: 3px;
  }
  
}


.#{$ns}-control-indicator {
  background-clip: padding-box;
  background-color: $control-background-color;
  background-image: $button-gradient;
  box-shadow: $button-box-shadow;
  border-radius: 50%;

  cursor: pointer;
  display: inline-block;
  // font-size is used to size indicator for all control types,
  // to reduce property changes needed across types and sizes (large).
  font-size: $control-indicator-size;
  height: 1em;
  margin-right: $control-indicator-spacing;
  margin-top: -3px;
  position: relative;
  user-select: none;
  vertical-align: middle;
  width: 1em;
  outline: red($color: #000000);

  &::before {
    content: "";
    display: block;
    height: 1em;
    width: 1em;
  }
}
.#{$ns}-control.#{$ns}-align-right{
  .#{$ns}.#{$ns}-control-indicator{
  width: auto;
  float: right;
  display: inline-table;
  }
}
