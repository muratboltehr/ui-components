/*
A mixin to generate the classes for one phase of a React CSSTransition.
`$phase` must be `appear` or `enter` or `exit`.
If `enter` phase is given then `appear` phase will be generated at the same time.
If `exit` phase is given then property values are animated in reverse, from final to initial.
**Example:**
@include react-transition-phase(toast, enter, $enter-translate, $before: "&");
@include react-transition-phase(toast, leave, $leave-blur, $pt-transition-duration * 3, $before: "&");
*/
/*
Given map of properties to values, set each property to the value at the given index.
(remember that sass indices are 1-based).
Example: `each-prop((opacity: 0 1), 2)` will print "opacity: 1"
*/
/*
Format transition class name with all the bits.
"enter" phase will include "appear" phase in returned name.
*/
/*
A mixin to generate the classes for one phase of a React CSSTransition.
`$phase` must be `appear` or `enter` or `exit`.
If `enter` phase is given then `appear` phase will be generated at the same time.
If `exit` phase is given then property values are animated in reverse, from final to initial.
**Example:**
@include react-transition-phase(toast, enter, $enter-translate, $before: "&");
@include react-transition-phase(toast, leave, $leave-blur, $pt-transition-duration * 3, $before: "&");
*/
/*
Given map of properties to values, set each property to the value at the given index.
(remember that sass indices are 1-based).
Example: `each-prop((opacity: 0 1), 2)` will print "opacity: 1"
*/
/*
Format transition class name with all the bits.
"enter" phase will include "appear" phase in returned name.
*/
/*
CSS `border` property issues:
- An element can only have one border.
- Borders can't stack with shadows.
- Borders modify the size of the element they're applied to.
- Border positioning requires the extra `box-sizing` property.

`box-shadow` doesn't have these issues, we're using it instead of `border`.
*/
/*
Overlay shadows are used for default buttons
floating on top of other elements. This way, the
shadows blend with the colors beneath it.
Switches and slider handles both use these variables.
*/
.optum-tag-intent-primary {
  background-color: #106ba3;
}

.optum-tag-intent-danger {
  stroke: #c23030;
  background-color: #c23030;
  stroke-linecap: round;
  -webkit-transform-origin: center;
          transform-origin: center;
  -webkit-transition: stroke-dashoffset;
  transition: stroke-dashoffset;
}

.optum-tag-intent-warning {
  stroke: #bf7326;
  background-color: #bf7326;
  stroke-linecap: round;
  -webkit-transform-origin: center;
          transform-origin: center;
  -webkit-transition: stroke-dashoffset;
  transition: stroke-dashoffset;
}

.optum-tag-intent-success {
  stroke: #0d8050;
  background-color: #0d8050;
  stroke-linecap: round;
  -webkit-transform-origin: center;
          transform-origin: center;
  -webkit-transition: stroke-dashoffset;
  transition: stroke-dashoffset;
}

.optum-active {
  opacity: 0.7;
  border-radius: 3px 0 0 3px;
  display: inline-block;
  height: 26px;
  line-height: 26px;
  padding: 0 20px 0 23px;
  position: relative;
  color: black;
  margin: 0 10px 10px 0;
  text-decoration: none;
  font-weight: bold;
  text-align: center;
  vertical-align: middle;
}

.optum-minimal {
  background-color: lightgray;
}

.optum-large {
  height: 35px;
  font-size: large;
  text-align: center;
  vertical-align: middle;
  line-height: 35px;
}

.optum-isRound {
  border-radius: 26px;
}

.optum-interactive:hover {
  background-color: lightgray;
}
/*# sourceMappingURL=Tag.css.map */