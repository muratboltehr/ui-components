/*
A mixin to generate the classes for one phase of a React CSSTransition.
`$phase` must be `appear` or `enter` or `exit`.
If `enter` phase is given then `appear` phase will be generated at the same time.
If `exit` phase is given then property values are animated in reverse, from final to initial.
**Example:**
@include react-transition-phase(toast, enter, $enter-translate, $before: "&");
@include react-transition-phase(toast, leave, $leave-blur, $pt-transition-duration * 3, $before: "&");
*/
/*
Given map of properties to values, set each property to the value at the given index.
(remember that sass indices are 1-based).
Example: `each-prop((opacity: 0 1), 2)` will print "opacity: 1"
*/
/*
Format transition class name with all the bits.
"enter" phase will include "appear" phase in returned name.
*/
.foo-bar {
  font-family: "Avenir Next", Helvetica, Arial, sans-serif;
  color: #0d8050;
}

.chart-normal-range {
  fill: #e8f0db;
  fill-opacity: 0.5;
}

.chart-sub-normal-range {
  fill: #f7faf3;
  fill-opacity: 0.5;
}

.chart-high-range,
.chart-low-range {
  fill: #fbebbe;
  fill-opacity: 1;
}

.chart-highest-range {
  fill: #eed1bc;
  fill-opacity: 1;
}

.chartBody {
  width: 100% !important;
}

.chartcontents {
  position: relative;
  overflow: hidden;
  width: 625px;
  height: 450px;
  text-align: left;
  line-height: normal;
  z-index: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

.charttablecontents {
  width: 200px;
}

.thirtypercentwidth {
  width: 30%;
}

.fourtypercentwidth {
  width: 40%;
}

.left {
  float: left !important;
}

.right {
  float: right !important;
}
/*# sourceMappingURL=A1C-Chart.css.map */